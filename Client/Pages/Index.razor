@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using System.Threading;
@using ServerlessStreamR.Shared;
@using ServerlessStreamR.Client.Models;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavManager;
@inject HttpClient Http;

<div class="video-content">
    <div class="user-video">
        <pre>@asciiVideo</pre>
        @if (IsLoggedIn)
        {
            @username @:&nbsp;
            @if (videoStarted)
            {
                <button type="button" class="btn btn-primary" @onclick="StopVideo">Stop</button>
            }
            else
            {
                <button type="button" class="btn btn-primary" @onclick="StartVideo" >Start</button>
                <button type="button" class="btn" @onclick="Logout" >Logout</button>
            }
        }
        else
        {
            <button type="button" class="btn btn-primary" @onclick="Login" >Login</button>
        }
    </div>

    @foreach (var video in otherVideos)
    {
        <div class="user-video">
            <pre>@video.Frame.Ascii</pre>
            @video.Frame.Username
        </div>
    }
</div>

<footer class="footer">
    <hr />
    <span class="text-secondary">Powered by Blazor, Azure Static Web Apps, Azure SignalR Service (.NET Version @Environment.Version.ToString())</span>
    <canvas id="myCanvas"></canvas>
</footer>

@code {
    private static Func<string, Task> updateAsciiVideo;
    private string asciiVideo = "";
    private IList<UserVideo> otherVideos = new List<UserVideo>();
    private bool videoStarted = false;
    private HubConnection hubConnection;
    private string apiBaseUrl = "";
    private string clientId = Guid.NewGuid().ToString();
    private string username = "";
    private Timer timer;

    private bool IsLoggedIn
    {
        get => !string.IsNullOrEmpty(username);
    }

    protected override async Task OnInitializedAsync()
    {
        var isLocal = NavManager.BaseUri.Contains("localhost");
        apiBaseUrl = isLocal ? "http://localhost:7071/" : NavManager.BaseUri;

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{apiBaseUrl}api")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Frame>("newFrame", (frame) =>
        {
            if (frame.ClientId == clientId) return;

            var userVideo = otherVideos.FirstOrDefault(v => v.Frame.ClientId == frame.ClientId);
            if (userVideo == null)
            {
                userVideo = new UserVideo();
                otherVideos.Add(userVideo);
            }
            userVideo.Frame = frame;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        updateAsciiVideo = async (asciiString) =>
        {
            asciiVideo = asciiString;
            StateHasChanged();

            var frame = new Frame
            {
                ClientId = clientId,
                Ascii = asciiString
            };
            await Http.PostAsJsonAsync($"{apiBaseUrl}api/sendframe", frame);
        };

        if (isLocal)
        {
            username = "test-user";
        }
        else
        {
            try
            {
                var userInfo = await Http.GetFromJsonAsync<UserInformation>("/.auth/me", new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                username = userInfo.ClientPrincipal.UserDetails;
                Console.WriteLine($"username: {username}");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            
        }

        timer = new Timer((_) => {
            for (var i = otherVideos.Count - 1; i >= 0; i--)
            {
                var video = otherVideos[i];
                if (DateTime.Now - video.LastUpdated > TimeSpan.FromSeconds(4))
                {
                    otherVideos.Remove(video);
                }
            }
            StateHasChanged();
        }, null, 0, 5000);
    }

    private async Task StartVideo()
    {
        await JSRuntime.InvokeVoidAsync("start", 80, 45, 4);
        videoStarted = true;
    }

    private async Task StopVideo()
    {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }

    private void Login()
    {
        NavManager.NavigateTo("/.auth/login/github?post_login_redirect_uri=/", forceLoad: true);
    }

    private void Logout()
    {
        NavManager.NavigateTo("/.auth/logout", forceLoad: true);
    }

    [JSInvokable]
    public static async Task UpdateAsciiVideo(string asciiString)
    {
        if (updateAsciiVideo != null)
        {
            await updateAsciiVideo.Invoke(asciiString);
        }
    }
}