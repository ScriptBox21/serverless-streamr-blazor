@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using ServerlessStreamR.Shared;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavManager;
@inject HttpClient Http;

<pre>@asciiVideo</pre>
<pre>@otherVideo</pre>


@if (videoStarted)
{
    <button type="button" class="btn btn-primary" @onclick="StopVideo">Stop</button>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="StartVideo" >Start</button>
}
<canvas id="myCanvas"></canvas>

@code {
    private static Func<string, Task> updateAsciiVideo;
    private string asciiVideo = ":)";
    private string otherVideo = ":)";
    private bool videoStarted = false;
    private HubConnection hubConnection;
    private string apiBaseUrl = "";
    private string clientId = Guid.NewGuid().ToString();

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = NavManager.BaseUri.Contains("localhost") ? "http://localhost:7071/" : NavManager.BaseUri;

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{apiBaseUrl}api")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Frame>("newFrame", (frame) =>
        {
            otherVideo = frame.Ascii;
        });

        await hubConnection.StartAsync();

        updateAsciiVideo = async (asciiString) =>
        {
            asciiVideo = asciiString;
            StateHasChanged();

            var frame = new Frame
            {
                ClientId = clientId,
                Ascii = asciiString
            };
            await Http.PostAsJsonAsync($"{apiBaseUrl}api/sendframe", frame);
        };
    }

    private async Task StartVideo()
    {
        await JSRuntime.InvokeVoidAsync("start", 80, 45, 4);
        videoStarted = true;
    }

    private async Task StopVideo()
    {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }

    [JSInvokable]
    public static async Task UpdateAsciiVideo(string asciiString)
    {
        if (updateAsciiVideo != null)
        {
            await updateAsciiVideo.Invoke(asciiString);
        }
    }
}